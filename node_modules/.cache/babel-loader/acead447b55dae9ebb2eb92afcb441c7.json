{"ast":null,"code":"import _regeneratorRuntime from \"H:\\\\taopp\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"H:\\\\taopp\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n**@desc: 请求方法封装\r\n**@author: 程松(贰叁)\r\n*/\nexport default function (_x, _x2) {\n  return _ref.apply(this, arguments);\n}\n\nfunction _ref() {\n  _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(path, opt) {\n    var url, options, response, _ref2, data, status;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = 'https://www.easy-mock.com/mock/5a964cffdd997801d1e291fe/movie' + path;\n            options = Object.assign({\n              method: 'GET'\n            }, opt);\n            _context.prev = 2;\n            _context.next = 5;\n            return fetch(url, options);\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            _ref2 = _context.sent;\n            data = _ref2.data;\n            status = _ref2.status;\n\n            if (!(status === 0)) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", data);\n\n          case 15:\n            _context.next = 19;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](2);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 17]]);\n  }));\n  return _ref.apply(this, arguments);\n}","map":{"version":3,"sources":["H:\\taopp\\my-app\\src\\helpers\\request.js"],"names":["path","opt","url","options","Object","assign","method","fetch","response","json","data","status"],"mappings":";;;AAAA;;;;AAKA;AAAA;AAAA;;;;;2BAAe,iBAAgBA,IAAhB,EAAsBC,GAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,GADO,GACD,kEAAkEF,IADjE;AAEPG,YAAAA,OAFO,GAEGC,MAAM,CAACC,MAAP,CAAc;AAC7BC,cAAAA,MAAM,EAAE;AADqB,aAAd,EAEbL,GAFa,CAFH;AAAA;AAAA;AAAA,mBAQYM,KAAK,CAACL,GAAD,EAAMC,OAAN,CARjB;;AAAA;AAQLK,YAAAA,QARK;AAAA;AAAA,mBASoBA,QAAQ,CAACC,IAAT,EATpB;;AAAA;AAAA;AASHC,YAAAA,IATG,SASHA,IATG;AASGC,YAAAA,MATH,SASGA,MATH;;AAAA,kBAWPA,MAAM,KAAK,CAXJ;AAAA;AAAA;AAAA;;AAAA,6CAYFD,IAZE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\r\n**@desc: 请求方法封装\r\n**@author: 程松(贰叁)\r\n*/\r\n\r\nexport default async function (path, opt) {\r\n  const url = 'https://www.easy-mock.com/mock/5a964cffdd997801d1e291fe/movie' + path;\r\n  const options = Object.assign({\r\n  \tmethod: 'GET',\r\n  }, opt);\r\n \r\n\r\n  try {\r\n    const response = await fetch(url, options);\r\n    const { data, status } = await response.json();\r\n\r\n    if (status === 0) {\r\n      return data;\r\n    } else {\r\n      // 错误处理\r\n    }\r\n  } catch (e) {\r\n    // 错误处理\r\n  }\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}